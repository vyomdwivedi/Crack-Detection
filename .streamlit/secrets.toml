[urls]
"best_IoU_67.pth" = "models/Copy of FPUNet_best_IoU_67.pth"
"Unet_model_epoch_9.pt" = "models/Unet_model_epoch_9.pt"
"UNetPPbest_model_epoch_40.pt" = "models/UNetPPbest_model_epoch_40.pt"
"DeepLabV3Plus.pt" = "models/DeepLabV3Plus.pt"
"FPN.pt" = "models/FPN.pt"
"se_resnet50-ce0d4300.pth" = "models/se_resnet50-ce0d4300.pth"

[Secret]
crackfusionnet = """
import torch
import torch.nn as nn
import segmentation_models_pytorch as smp

class CrackFUsionNet(nn.Module):
    def __init__(self, num_classes=1):
        super(CrackFUsionNet, self).__init__()
        self.num_classes = num_classes
        
        # UNet branch with SE-ResNet50 encoder
        self.unet = smp.Unet(
            encoder_name='se_resnet50',
            encoder_weights=None,
            in_channels=3,
            classes=num_classes,
            activation=None
        )
        
        # FPN branch with DPN68 encoder  
        self.fpn = smp.FPN(
            encoder_name='dpn68',
            encoder_weights=None,
            in_channels=3,
            classes=num_classes,
            activation=None
        )
        
        # Load pre-trained encoder weights
        try:
            se_resnet50_weights = torch.load('models/se_resnet50-ce0d4300.pth', map_location='cpu')
            self.unet.encoder.load_state_dict(se_resnet50_weights)
        except:
            pass
            
        try:
            dpn68_weights = torch.load('models/dpn68-4af7d88d2.pth', map_location='cpu')
            self.fpn.encoder.load_state_dict(dpn68_weights)
        except:
            pass
        
        # Fusion layers
        self.fusion = nn.Sequential(
            nn.Conv2d(2, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, num_classes, kernel_size=1),
        )
    
    def forward(self, x):
        # Get outputs from both networks
        unet_out = self.unet(x)
        fpn_out = self.fpn(x)
        
        # Concatenate and fuse
        combined = torch.cat([unet_out, fpn_out], dim=1)
        fused = self.fusion(combined)
        
        return fused
"""
